
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://urgqkhmasmedgshizrxb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVyZ3FraG1hc21lZGdzaGl6cnhiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIxMDYxNDYsImV4cCI6MjA1NzY4MjE0Nn0.1hVhyLN-CN4pOPrDLQqPB2DACdz7AH7QzDvHtA7Lo7s";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
    },
    global: {
      fetch: (url: RequestInfo | URL, init?: RequestInit) => fetch(url, init),
    },
  }
);

// Initialize bucket on client load
export const initializeBucket = async () => {
  try {
    // Check if bucket exists
    const { data: buckets, error: bucketError } = await supabase.storage.listBuckets();
    
    if (bucketError) {
      console.error("Error checking buckets:", bucketError);
      return false;
    }
    
    const bucketExists = buckets.some(bucket => bucket.name === 'quiz-files');
    if (bucketExists) {
      console.log("Bucket 'quiz-files' exists");
      return true;
    }
    
    // Create bucket using edge function
    console.log("Calling edge function to create bucket");
    const { data, error } = await supabase.functions.invoke('create-storage-bucket');
    
    if (error || !data?.success) {
      console.error("Failed to create bucket:", error || data?.error);
      return false;
    }
    
    console.log("Bucket created successfully");
    return true;
  } catch (err) {
    console.error("Bucket initialization error:", err);
    return false;
  }
};

// Validate client initialization
if (!supabase) {
  console.error("Failed to initialize Supabase client");
} else {
  console.log("Supabase client initialized successfully");
  // Initialize bucket when app starts
  initializeBucket().then(success => {
    console.log("Bucket initialization:", success ? "successful" : "failed");
  });
}
